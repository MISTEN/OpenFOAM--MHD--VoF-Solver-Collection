/*–––––––––––––––––––––––––––––––*- C++ -*–––––––––––––––––––––––––––––––––-*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
FoamFile
{
     version     2.0;
     format      ascii;
     class       dictionary;
     object      blockMeshDict;
}
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// convertToMeters 0.001; // <- old ...
scale   0.001;

h -150.0; // height of cylinder
ri 53.25;  // diameter of inner cylinder
ra 76.5;  // diameter of outercylinder
zi -5.0;  // immerseion depth
dskin 1.0;
dmould 15;

ra_slagskin #calc "$ra+$dskin";
ra_mould #calc "$ra_slagskin+$dmould";

msz 1.25; // meshsize

// --------------------------------------

ra0 #calc "$ra";
ra1 #calc "$ra_slagskin";
ra2 #calc "$ra_mould";

// Cell Spacings
czi #calc "std::ceil(std::abs($zi)/$msz)";;

c1 #calc "std::ceil(std::sin(45.0*M_PI/180.0)*2.0/3.0*$ri/$msz)";    // Außen liegene Knoten pro Achtel
cr1 #calc "std::ceil((((1.0/3.0*$ri)/$msz)+ (($ri-(std::cos(45.0*M_PI/180.0)*2.0/3.0*$ri))/$msz))/2.0)";   // Im inneren Radius liegende Knoten
cr2 #calc "std::ceil(std::abs($ra0-$ri)/$msz)";             // Im äußeren Radius liegende Knoten
cr3 1;                    // n radial cells electrode
cr4 3;                    // n radial cells mould
ch #calc "std::ceil(std::abs($h-($zi))/$msz)";             // Zellen pro Höhe

// Calculated Vertex/Point Variables

bx0 #calc "2.0/3.0*$ri*cos(45.0*M_PI/180.0)";
by0 #calc "2.0/3.0*$ri*sin(45.0*M_PI/180.0)";

// var 1
// bx1 #calc "2.0/3.0*$ri";
// by1 #calc "2.0/3.0*$ri";

//var 2
bx1 #calc "0.6*((2.0/3.0*$ri)-$bx0)+$bx0";
by1 #calc "0.6*((2.0/3.0*$ri)-$by0)+$by0";

rix #calc "$ri*cos(45.0*M_PI/180.0)";
riy #calc "$ri*sin(45.0*M_PI/180.0)";

ra0x #calc "$ra0*cos(45.0*M_PI/180.0)";
ra0y #calc "$ra0*sin(45.0*M_PI/180.0)";

ra1x #calc "$ra1*cos(45.0*M_PI/180.0)";
ra1y #calc "$ra1*sin(45.0*M_PI/180.0)";

ra2x #calc "$ra2*cos(45.0*M_PI/180.0)";
ra2y #calc "$ra2*sin(45.0*M_PI/180.0)";

mbx0 #calc "-1.0*$bx0";
mby0 #calc "-1.0*$by0";

mbx1 #calc "-1.0*$bx1";
mby1 #calc "-1.0*$by1";

mri #calc "-1.0*$ri";
mra0 #calc "-1.0*$ra0";

mra1 #calc "-1.0*$ra1";
mra2 #calc "-1.0*$ra2";


mrix #calc "-1.0*$rix";
mriy #calc "-1.0*$riy";

mra0x #calc "-1.0*$ra0x";
mra0y #calc "-1.0*$ra0y";

mra1x #calc "-1.0*$ra1x";
mra1y #calc "-1.0*$ra1y";

mra2x #calc "-1.0*$ra2x";
mra2y #calc "-1.0*$ra2y";


// Edge Interpolation Point Coordinates
// x-dir
ip_rix1 #calc "$ri*cos(67.5*M_PI/180.0)";
ip_rix2 #calc "$ri*cos(22.5*M_PI/180.0)";

ip_ra0x1 #calc "$ra0*cos(67.5*M_PI/180.0)";
ip_ra0x2 #calc "$ra0*cos(22.5*M_PI/180.0)";

ip_ra1x1 #calc "$ra1*cos(67.5*M_PI/180.0)";
ip_ra1x2 #calc "$ra1*cos(22.5*M_PI/180.0)";

ip_ra2x1 #calc "$ra2*cos(67.5*M_PI/180.0)";
ip_ra2x2 #calc "$ra2*cos(22.5*M_PI/180.0)";

mip_rix1 #calc "-1.0*$ip_rix1";
mip_rix2 #calc "-1.0*$ip_rix2";

mip_ra0x1 #calc "-1.0*$ip_ra0x1";
mip_ra0x2 #calc "-1.0*$ip_ra0x2";

mip_ra1x1 #calc "-1.0*$ip_ra1x1";
mip_ra1x2 #calc "-1.0*$ip_ra1x2";

mip_ra2x1 #calc "-1.0*$ip_ra2x1";
mip_ra2x2 #calc "-1.0*$ip_ra2x2";

// y-dir
ip_riy1 #calc "$ri*sin(22.5*M_PI/180.0)";
ip_riy2 #calc "$ri*sin(67.5*M_PI/180.0)";

ip_ra0y1 #calc "$ra0*sin(22.5*M_PI/180.0)";
ip_ra0y2 #calc "$ra0*sin(67.5*M_PI/180.0)";

ip_ra1y1 #calc "$ra1*sin(22.5*M_PI/180.0)";
ip_ra1y2 #calc "$ra1*sin(67.5*M_PI/180.0)";

ip_ra2y1 #calc "$ra2*sin(22.5*M_PI/180.0)";
ip_ra2y2 #calc "$ra2*sin(67.5*M_PI/180.0)";

mip_riy1 #calc "-1.0*$ip_riy1";
mip_riy2 #calc "-1.0*$ip_riy2";

mip_ra0y1 #calc "-1.0*$ip_ra0y1";
mip_ra0y2 #calc "-1.0*$ip_ra0y2";

mip_ra1y1 #calc "-1.0*$ip_ra1y1";
mip_ra1y2 #calc "-1.0*$ip_ra1y2";

mip_ra2y1 #calc "-1.0*$ip_ra2y1";
mip_ra2y2 #calc "-1.0*$ip_ra2y2";


vertices
(
  (	0	0	0	)
  (	0	$by1	0	)
  (	$bx0	$by0	0	)
  (	$bx1	0	0	)
  (	$bx0	$mby0	0	)
  (	0	$mby1	0	)
  (	$mbx0	$mby0	0	)
  (	$mbx1	0	0	)
  (	$mbx0	$by0	0	)
  (	0	$ri	0	)
  (	$rix	$riy	0	)
  (	$ri	0	0	)
  (	$rix	$mriy	0	)
  (	0	$mri	0	)
  (	$mrix	$mriy	0	)
  (	$mri	0	0	)
  (	$mrix	$riy	0	)
  (	0	$ra0	0	)
  (	$ra0x	$ra0y	0	)
  (	$ra0	0	0	)
  (	$ra0x	$mra0y	0	)
  (	0	$mra0	0	)
  (	$mra0x	$mra0y	0	)
  (	$mra0	0	0	)
  (	$mra0x	$ra0y	0	)
  (	0	$ra1	0	)
  (	$ra1x	$ra1y	0	)
  (	$ra1	0	0	)
  (	$ra1x	$mra1y	0	)
  (	0	$mra1	0	)
  (	$mra1x	$mra1y	0	)
  (	$mra1	0	0	)
  (	$mra1x	$ra1y	0	)
  (	0	$ra2	0	)
  (	$ra2x	$ra2y	0	)
  (	$ra2	0	0	)
  (	$ra2x	$mra2y	0	)
  (	0	$mra2	0	)
  (	$mra2x	$mra2y	0	)
  (	$mra2	0	0	)
  (	$mra2x	$ra2y	0	)
  (	0	0	$zi	)
  (	0	$by1	$zi	)
  (	$bx0	$by0	$zi	)
  (	$bx1	0	$zi	)
  (	$bx0	$mby0	$zi	)
  (	0	$mby1	$zi	)
  (	$mbx0	$mby0	$zi	)
  (	$mbx1	0	$zi	)
  (	$mbx0	$by0	$zi	)
  (	0	$ri	$zi	)
  (	$rix	$riy	$zi	)
  (	$ri	0	$zi	)
  (	$rix	$mriy	$zi	)
  (	0	$mri	$zi	)
  (	$mrix	$mriy	$zi	)
  (	$mri	0	$zi	)
  (	$mrix	$riy	$zi	)
  (	0	$ra0	$zi	)
  (	$ra0x	$ra0y	$zi	)
  (	$ra0	0	$zi	)
  (	$ra0x	$mra0y	$zi	)
  (	0	$mra0	$zi	)
  (	$mra0x	$mra0y	$zi	)
  (	$mra0	0	$zi	)
  (	$mra0x	$ra0y	$zi	)
  (	0	$ra1	$zi	)
  (	$ra1x	$ra1y	$zi	)
  (	$ra1	0	$zi	)
  (	$ra1x	$mra1y	$zi	)
  (	0	$mra1	$zi	)
  (	$mra1x	$mra1y	$zi	)
  (	$mra1	0	$zi	)
  (	$mra1x	$ra1y	$zi	)
  (	0	$ra2	$zi	)
  (	$ra2x	$ra2y	$zi	)
  (	$ra2	0	$zi	)
  (	$ra2x	$mra2y	$zi	)
  (	0	$mra2	$zi	)
  (	$mra2x	$mra2y	$zi	)
  (	$mra2	0	$zi	)
  (	$mra2x	$ra2y	$zi	)
  (	0	0	$h	)
  (	0	$by1	$h	)
  (	$bx0	$by0	$h	)
  (	$bx1	0	$h	)
  (	$bx0	$mby0	$h	)
  (	0	$mby1	$h	)
  (	$mbx0	$mby0	$h	)
  (	$mbx1	0	$h	)
  (	$mbx0	$by0	$h	)
  (	0	$ri	$h	)
  (	$rix	$riy	$h	)
  (	$ri	0	$h	)
  (	$rix	$mriy	$h	)
  (	0	$mri	$h	)
  (	$mrix	$mriy	$h	)
  (	$mri	0	$h	)
  (	$mrix	$riy	$h	)
  (	0	$ra0	$h	)
  (	$ra0x	$ra0y	$h	)
  (	$ra0	0	$h	)
  (	$ra0x	$mra0y	$h	)
  (	0	$mra0	$h	)
  (	$mra0x	$mra0y	$h	)
  (	$mra0	0	$h	)
  (	$mra0x	$ra0y	$h	)
  (	0	$ra1	$h	)
  (	$ra1x	$ra1y	$h	)
  (	$ra1	0	$h	)
  (	$ra1x	$mra1y	$h	)
  (	0	$mra1	$h	)
  (	$mra1x	$mra1y	$h	)
  (	$mra1	0	$h	)
  (	$mra1x	$ra1y	$h	)
  (	0	$ra2	$h	)
  (	$ra2x	$ra2y	$h	)
  (	$ra2	0	$h	)
  (	$ra2x	$mra2y	$h	)
  (	0	$mra2	$h	)
  (	$mra2x	$mra2y	$h	)
  (	$mra2	0	$h	)
  (	$mra2x	$ra2y	$h	)
  );

blocks
(
  // hex (	41	44	43	42	0	3	2	1	)	(	$c1	$c1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	46	45	44	41	5	4	3	0	)	(	$c1	$c1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	47	46	41	48	6	5	0	7	)	(	$c1	$c1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	48	41	42	49	7	0	1	8	)	(	$c1	$c1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	42	43	51	50	1	2	10	9	)	(	$c1	$cr1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	43	44	52	51	2	3	11	10	)	(	$c1	$cr1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	44	45	53	52	3	4	12	11	)	(	$c1	$cr1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	45	46	54	53	4	5	13	12	)	(	$c1	$cr1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	46	47	55	54	5	6	14	13	)	(	$c1	$cr1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	47	48	56	55	6	7	15	14	)	(	$c1	$cr1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	48	49	57	56	7	8	16	15	)	(	$c1	$cr1	$czi	)	simpleGrading	(	1	1	1	)
  // hex (	49	42	50	57	8	1	9	16	)	(	$c1	$cr1	$czi	)	simpleGrading	(	1	1	1	)
  hex (	50	51	59	58	9	10	18	17	)	(	$c1	$cr2	$czi	)	simpleGrading	(	1	1	1	)
  hex (	51	52	60	59	10	11	19	18	)	(	$c1	$cr2	$czi	)	simpleGrading	(	1	1	1	)
  hex (	52	53	61	60	11	12	20	19	)	(	$c1	$cr2	$czi	)	simpleGrading	(	1	1	1	)
  hex (	53	54	62	61	12	13	21	20	)	(	$c1	$cr2	$czi	)	simpleGrading	(	1	1	1	)
  hex (	54	55	63	62	13	14	22	21	)	(	$c1	$cr2	$czi	)	simpleGrading	(	1	1	1	)
  hex (	55	56	64	63	14	15	23	22	)	(	$c1	$cr2	$czi	)	simpleGrading	(	1	1	1	)
  hex (	56	57	65	64	15	16	24	23	)	(	$c1	$cr2	$czi	)	simpleGrading	(	1	1	1	)
  hex (	57	50	58	65	16	9	17	24	)	(	$c1	$cr2	$czi	)	simpleGrading	(	1	1	1	)
  hex (	58	59	67	66	17	18	26	25	)	(	$c1	$cr3	$czi	)	simpleGrading	(	1	1	1	)
  hex (	59	60	68	67	18	19	27	26	)	(	$c1	$cr3	$czi	)	simpleGrading	(	1	1	1	)
  hex (	60	61	69	68	19	20	28	27	)	(	$c1	$cr3	$czi	)	simpleGrading	(	1	1	1	)
  hex (	61	62	70	69	20	21	29	28	)	(	$c1	$cr3	$czi	)	simpleGrading	(	1	1	1	)
  hex (	62	63	71	70	21	22	30	29	)	(	$c1	$cr3	$czi	)	simpleGrading	(	1	1	1	)
  hex (	63	64	72	71	22	23	31	30	)	(	$c1	$cr3	$czi	)	simpleGrading	(	1	1	1	)
  hex (	64	65	73	72	23	24	32	31	)	(	$c1	$cr3	$czi	)	simpleGrading	(	1	1	1	)
  hex (	65	58	66	73	24	17	25	32	)	(	$c1	$cr3	$czi	)	simpleGrading	(	1	1	1	)
  hex (	66	67	75	74	25	26	34	33	)	(	$c1	$cr4	$czi	)	simpleGrading	(	1	1	1	)
  hex (	67	68	76	75	26	27	35	34	)	(	$c1	$cr4	$czi	)	simpleGrading	(	1	1	1	)
  hex (	68	69	77	76	27	28	36	35	)	(	$c1	$cr4	$czi	)	simpleGrading	(	1	1	1	)
  hex (	69	70	78	77	28	29	37	36	)	(	$c1	$cr4	$czi	)	simpleGrading	(	1	1	1	)
  hex (	70	71	79	78	29	30	38	37	)	(	$c1	$cr4	$czi	)	simpleGrading	(	1	1	1	)
  hex (	71	72	80	79	30	31	39	38	)	(	$c1	$cr4	$czi	)	simpleGrading	(	1	1	1	)
  hex (	72	73	81	80	31	32	40	39	)	(	$c1	$cr4	$czi	)	simpleGrading	(	1	1	1	)
  hex (	73	66	74	81	32	25	33	40	)	(	$c1	$cr4	$czi	)	simpleGrading	(	1	1	1	)

  hex (	82	85	84	83	41	44	43	42	)	(	$c1	$c1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	87	86	85	82	46	45	44	41	)	(	$c1	$c1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	88	87	82	89	47	46	41	48	)	(	$c1	$c1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	89	82	83	90	48	41	42	49	)	(	$c1	$c1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	83	84	92	91	42	43	51	50	)	(	$c1	$cr1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	84	85	93	92	43	44	52	51	)	(	$c1	$cr1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	85	86	94	93	44	45	53	52	)	(	$c1	$cr1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	86	87	95	94	45	46	54	53	)	(	$c1	$cr1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	87	88	96	95	46	47	55	54	)	(	$c1	$cr1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	88	89	97	96	47	48	56	55	)	(	$c1	$cr1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	89	90	98	97	48	49	57	56	)	(	$c1	$cr1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	90	83	91	98	49	42	50	57	)	(	$c1	$cr1	$ch	)	simpleGrading	(	1	1	1	)
  hex (	91	92	100	99	50	51	59	58	)	(	$c1	$cr2	$ch	)	simpleGrading	(	1	1	1	)
  hex (	92	93	101	100	51	52	60	59	)	(	$c1	$cr2	$ch	)	simpleGrading	(	1	1	1	)
  hex (	93	94	102	101	52	53	61	60	)	(	$c1	$cr2	$ch	)	simpleGrading	(	1	1	1	)
  hex (	94	95	103	102	53	54	62	61	)	(	$c1	$cr2	$ch	)	simpleGrading	(	1	1	1	)
  hex (	95	96	104	103	54	55	63	62	)	(	$c1	$cr2	$ch	)	simpleGrading	(	1	1	1	)
  hex (	96	97	105	104	55	56	64	63	)	(	$c1	$cr2	$ch	)	simpleGrading	(	1	1	1	)
  hex (	97	98	106	105	56	57	65	64	)	(	$c1	$cr2	$ch	)	simpleGrading	(	1	1	1	)
  hex (	98	91	99	106	57	50	58	65	)	(	$c1	$cr2	$ch	)	simpleGrading	(	1	1	1	)
  hex (	99	100	108	107	58	59	67	66	)	(	$c1	$cr3	$ch	)	simpleGrading	(	1	1	1	)
  hex (	100	101	109	108	59	60	68	67	)	(	$c1	$cr3	$ch	)	simpleGrading	(	1	1	1	)
  hex (	101	102	110	109	60	61	69	68	)	(	$c1	$cr3	$ch	)	simpleGrading	(	1	1	1	)
  hex (	102	103	111	110	61	62	70	69	)	(	$c1	$cr3	$ch	)	simpleGrading	(	1	1	1	)
  hex (	103	104	112	111	62	63	71	70	)	(	$c1	$cr3	$ch	)	simpleGrading	(	1	1	1	)
  hex (	104	105	113	112	63	64	72	71	)	(	$c1	$cr3	$ch	)	simpleGrading	(	1	1	1	)
  hex (	105	106	114	113	64	65	73	72	)	(	$c1	$cr3	$ch	)	simpleGrading	(	1	1	1	)
  hex (	106	99	107	114	65	58	66	73	)	(	$c1	$cr3	$ch	)	simpleGrading	(	1	1	1	)
  hex (	107	108	116	115	66	67	75	74	)	(	$c1	$cr4	$ch	)	simpleGrading	(	1	1	1	)
  hex (	108	109	117	116	67	68	76	75	)	(	$c1	$cr4	$ch	)	simpleGrading	(	1	1	1	)
  hex (	109	110	118	117	68	69	77	76	)	(	$c1	$cr4	$ch	)	simpleGrading	(	1	1	1	)
  hex (	110	111	119	118	69	70	78	77	)	(	$c1	$cr4	$ch	)	simpleGrading	(	1	1	1	)
  hex (	111	112	120	119	70	71	79	78	)	(	$c1	$cr4	$ch	)	simpleGrading	(	1	1	1	)
  hex (	112	113	121	120	71	72	80	79	)	(	$c1	$cr4	$ch	)	simpleGrading	(	1	1	1	)
  hex (	113	114	122	121	72	73	81	80	)	(	$c1	$cr4	$ch	)	simpleGrading	(	1	1	1	)
  hex (	114	107	115	122	73	66	74	81	)	(	$c1	$cr4	$ch	)	simpleGrading	(	1	1	1	)
);

edges
(
  arc	9	10	(	$ip_rix1	$ip_riy2	0	)
  arc	10	11	(	$ip_rix2	$ip_riy1	0	)
  arc	11	12	(	$ip_rix2	$mip_riy1	0	)
  arc	12	13	(	$ip_rix1	$mip_riy2	0	)
  arc	13	14	(	$mip_rix1	$mip_riy2	0	)
  arc	14	15	(	$mip_rix2	$mip_riy1	0	)
  arc	15	16	(	$mip_rix2	$ip_riy1	0	)
  arc	16	9	(	$mip_rix1	$ip_riy2	0	)
  arc	17	18	(	$ip_ra0x1	$ip_ra0y2	0	)
  arc	18	19	(	$ip_ra0x2	$ip_ra0y1	0	)
  arc	19	20	(	$ip_ra0x2	$mip_ra0y1	0	)
  arc	20	21	(	$ip_ra0x1	$mip_ra0y2	0	)
  arc	21	22	(	$mip_ra0x1	$mip_ra0y2	0	)
  arc	22	23	(	$mip_ra0x2	$mip_ra0y1	0	)
  arc	23	24	(	$mip_ra0x2	$ip_ra0y1	0	)
  arc	24	17	(	$mip_ra0x1	$ip_ra0y2	0	)
  arc	25	26	(	$ip_ra1x1	$ip_ra1y2	0	)
  arc	26	27	(	$ip_ra1x2	$ip_ra1y1	0	)
  arc	27	28	(	$ip_ra1x2	$mip_ra1y1	0	)
  arc	28	29	(	$ip_ra1x1	$mip_ra1y2	0	)
  arc	29	30	(	$mip_ra1x1	$mip_ra1y2	0	)
  arc	30	31	(	$mip_ra1x2	$mip_ra1y1	0	)
  arc	31	32	(	$mip_ra1x2	$ip_ra1y1	0	)
  arc	32	25	(	$mip_ra1x1	$ip_ra1y2	0	)
  arc	33	34	(	$ip_ra2x1	$ip_ra2y2	0	)
  arc	34	35	(	$ip_ra2x2	$ip_ra2y1	0	)
  arc	35	36	(	$ip_ra2x2	$mip_ra2y1	0	)
  arc	36	37	(	$ip_ra2x1	$mip_ra2y2	0	)
  arc	37	38	(	$mip_ra2x1	$mip_ra2y2	0	)
  arc	38	39	(	$mip_ra2x2	$mip_ra2y1	0	)
  arc	39	40	(	$mip_ra2x2	$ip_ra2y1	0	)
  arc	40	33	(	$mip_ra2x1	$ip_ra2y2	0	)
                
  arc	50	51	(	$ip_rix1	$ip_riy2	$zi	)
  arc	51	52	(	$ip_rix2	$ip_riy1	$zi	)
  arc	52	53	(	$ip_rix2	$mip_riy1	$zi	)
  arc	53	54	(	$ip_rix1	$mip_riy2	$zi	)
  arc	54	55	(	$mip_rix1	$mip_riy2	$zi	)
  arc	55	56	(	$mip_rix2	$mip_riy1	$zi	)
  arc	56	57	(	$mip_rix2	$ip_riy1	$zi	)
  arc	57	50	(	$mip_rix1	$ip_riy2	$zi	)
  arc	58	59	(	$ip_ra0x1	$ip_ra0y2	$zi	)
  arc	59	60	(	$ip_ra0x2	$ip_ra0y1	$zi	)
  arc	60	61	(	$ip_ra0x2	$mip_ra0y1	$zi	)
  arc	61	62	(	$ip_ra0x1	$mip_ra0y2	$zi	)
  arc	62	63	(	$mip_ra0x1	$mip_ra0y2	$zi	)
  arc	63	64	(	$mip_ra0x2	$mip_ra0y1	$zi	)
  arc	64	65	(	$mip_ra0x2	$ip_ra0y1	$zi	)
  arc	65	58	(	$mip_ra0x1	$ip_ra0y2	$zi	)
  arc	66	67	(	$ip_ra1x1	$ip_ra1y2	$zi	)
  arc	67	68	(	$ip_ra1x2	$ip_ra1y1	$zi	)
  arc	68	69	(	$ip_ra1x2	$mip_ra1y1	$zi	)
  arc	69	70	(	$ip_ra1x1	$mip_ra1y2	$zi	)
  arc	70	71	(	$mip_ra1x1	$mip_ra1y2	$zi	)
  arc	71	72	(	$mip_ra1x2	$mip_ra1y1	$zi	)
  arc	72	73	(	$mip_ra1x2	$ip_ra1y1	$zi	)
  arc	73	66	(	$mip_ra1x1	$ip_ra1y2	$zi	)
  arc	74	75	(	$ip_ra2x1	$ip_ra2y2	$zi	)
  arc	75	76	(	$ip_ra2x2	$ip_ra2y1	$zi	)
  arc	76	77	(	$ip_ra2x2	$mip_ra2y1	$zi	)
  arc	77	78	(	$ip_ra2x1	$mip_ra2y2	$zi	)
  arc	78	79	(	$mip_ra2x1	$mip_ra2y2	$zi	)
  arc	79	80	(	$mip_ra2x2	$mip_ra2y1	$zi	)
  arc	80	81	(	$mip_ra2x2	$ip_ra2y1	$zi	)
  arc	81	74	(	$mip_ra2x1	$ip_ra2y2	$zi	)
                
  arc	91	92	(	$ip_rix1	$ip_riy2	$h	)
  arc	92	93	(	$ip_rix2	$ip_riy1	$h	)
  arc	93	94	(	$ip_rix2	$mip_riy1	$h	)
  arc	94	95	(	$ip_rix1	$mip_riy2	$h	)
  arc	95	96	(	$mip_rix1	$mip_riy2	$h	)
  arc	96	97	(	$mip_rix2	$mip_riy1	$h	)
  arc	97	98	(	$mip_rix2	$ip_riy1	$h	)
  arc	98	91	(	$mip_rix1	$ip_riy2	$h	)
  arc	99	100	(	$ip_ra0x1	$ip_ra0y2	$h	)
  arc	100	101	(	$ip_ra0x2	$ip_ra0y1	$h	)
  arc	101	102	(	$ip_ra0x2	$mip_ra0y1	$h	)
  arc	102	103	(	$ip_ra0x1	$mip_ra0y2	$h	)
  arc	103	104	(	$mip_ra0x1	$mip_ra0y2	$h	)
  arc	104	105	(	$mip_ra0x2	$mip_ra0y1	$h	)
  arc	105	106	(	$mip_ra0x2	$ip_ra0y1	$h	)
  arc	106	99	(	$mip_ra0x1	$ip_ra0y2	$h	)
  arc	107	108	(	$ip_ra1x1	$ip_ra1y2	$h	)
  arc	108	109	(	$ip_ra1x2	$ip_ra1y1	$h	)
  arc	109	110	(	$ip_ra1x2	$mip_ra1y1	$h	)
  arc	110	111	(	$ip_ra1x1	$mip_ra1y2	$h	)
  arc	111	112	(	$mip_ra1x1	$mip_ra1y2	$h	)
  arc	112	113	(	$mip_ra1x2	$mip_ra1y1	$h	)
  arc	113	114	(	$mip_ra1x2	$ip_ra1y1	$h	)
  arc	114	107	(	$mip_ra1x1	$ip_ra1y2	$h	)
  arc	115	116	(	$ip_ra2x1	$ip_ra2y2	$h	)
  arc	116	117	(	$ip_ra2x2	$ip_ra2y1	$h	)
  arc	117	118	(	$ip_ra2x2	$mip_ra2y1	$h	)
  arc	118	119	(	$ip_ra2x1	$mip_ra2y2	$h	)
  arc	119	120	(	$mip_ra2x1	$mip_ra2y2	$h	)
  arc	120	121	(	$mip_ra2x2	$mip_ra2y1	$h	)
  arc	121	122	(	$mip_ra2x2	$ip_ra2y1	$h	)
  arc	122	115	(	$mip_ra2x1	$ip_ra2y2	$h	)

);

// The face should be oriented such, the normal (defined via right-hand-rule) is pointing outward. In other wards: If you look from the inside out, you should order the point in a clockwise manner.

boundary
(
  INLET              // patch name
  {
    type patch;    // patch type for patch 0
    faces
    (
      (	41	44	43	42	)
      (	46	45	44	41	)
      (	47	46	41	48	)
      (	48	41	42	49	)
      (	42	43	51	50	)
      (	44	52	51	43	)
      (	45	53	52	44	)
      (	54	53	45	46	)
      (	55	54	46	47	)
      (	55	47	48	56	)
      (	56	48	49	57	)
      (	49	42	50	57	)
    );
  }

  OUTLET
  {
    type patch;
    faces
    (
      (	91	92	100	99	)
      (	93	101	100	92	)
      (	94	102	101	93	)
      (	103	102	94	95	)
      (	104	103	95	96	)
      (	104	96	97	105	)
      (	105	97	98	106	)
      (	98	91	99	106	)
      (	82	85	84	83	)
      (	87	86	85	82	)
      (	88	87	82	89	)
      (	89	82	83	90	)
      (	83	84	92	91	)
      (	85	93	92	84	)
      (	86	94	93	85	)
      (	95	94	86	87	)
      (	96	95	87	88	)
      (	96	88	89	97	)
      (	97	89	90	98	)
      (	90	83	91	98	)
    );
  }

  WALL_FREE_SURFACE
  {
    type wall;
    faces
    (
      (	9	10	18	17	)
      (	11	19	18	10	)
      (	12	20	19	11	)
      (	21	20	12	13	)
      (	22	21	13	14	)
      (	22	14	15	23	)
      (	23	15	16	24	)
      (	16	9	17	24	)
    );
  }

  WALL_MOULD_AUSSEN
  {
    type wall;
    faces
    (
      (	75	34	33	74	)
      (	76	35	34	75	)
      (	77	36	35	76	)
      (	78	37	36	77	)
      (	79	38	37	78	)
      (	80	39	38	79	)
      (	81	40	39	80	)
      (	74	33	40	81	)
      (	116	75	74	115	)
      (	117	76	75	116	)
      (	118	77	76	117	)
      (	119	78	77	118	)
      (	120	79	78	119	)
      (	121	80	79	120	)
      (	122	81	80	121	)
      (	115	74	81	122	)
    );
  }

  WALL_EL_SIDE
  {
    type wall;
    faces
    (
        (	51	10	9	50	)
        (	52	11	10	51	)
        (	53	12	11	52	)
        (	54	13	12	53	)
        (	55	14	13	54	)
        (	56	15	14	55	)
        (	57	16	15	56	)
        (	50	9	16	57	)
    );
  }


  WALL_SLAG_SKIN_TOP
  {
    type wall;
    faces
    (
      (	17	18	26	25	)
      (	19	27	26	18	)
      (	20	28	27	19	)
      (	29	28	20	21	)
      (	30	29	21	22	)
      (	30	22	23	31	)
      (	31	23	24	32	)
      (	24	17	25	32	)

    );
  }

  WALL_SLAG_SKIN_BOT
  {
    type wall;
    faces
    (
      (	99	100	108	107	)
      (	101	109	108	100	)
      (	102	110	109	101	)
      (	111	110	102	103	)
      (	112	111	103	104	)
      (	112	104	105	113	)
      (	113	105	106	114	)
      (	106	99	107	114	)
    );
  }

  WALL_MOULD_TOP		
  {
    type wall;
    faces
    (
      (	25	26	34	33	)
      (	27	35	34	26	)
      (	28	36	35	27	)
      (	37	36	28	29	)
      (	38	37	29	30	)
      (	38	30	31	39	)
      (	39	31	32	40	)
      (	32	25	33	40	)
    );
  }

  WALL_MOULD_BOT	
  {
    type wall;
    faces
    (
      (	107	108	116	115	)
      (	109	117	116	108	)
      (	110	118	117	109	)
      (	119	118	110	111	)
      (	120	119	111	112	)
      (	120	112	113	121	)
      (	121	113	114	122	)
      (	114	107	115	122	)
    );
  }

  // WALL_MOULD_SLAG_SKIN	
  // {
  //   type wall;
  //   faces
  //   (
  //     (	67	26	25	66	)
  //     (	68	27	26	67	)
  //     (	69	28	27	68	)
  //     (	70	29	28	69	)
  //     (	71	30	29	70	)
  //     (	72	31	30	71	)
  //     (	73	32	31	72	)
  //     (	66	25	32	73	)
  //     (	108	67	66	107	)
  //     (	109	68	67	108	)
  //     (	110	69	68	109	)
  //     (	111	70	69	110	)
  //     (	112	71	70	111	)
  //     (	113	72	71	112	)
  //     (	114	73	72	113	)
  //     (	107	66	73	114	)
  //   );
  // }

  // WALL_MIXTURE_SLAG_SKIN
  // {
  //   type wall;
  //   faces
  //   (
  //     (	59	18	17	58	)
  //     (	60	19	18	59	)
  //     (	61	20	19	60	)
  //     (	62	21	20	61	)
  //     (	63	22	21	62	)
  //     (	64	23	22	63	)
  //     (	65	24	23	64	)
  //     (	58	17	24	65	)
  //     (	100	59	58	99	)
  //     (	101	60	59	100	)
  //     (	102	61	60	101	)
  //     (	103	62	61	102	)
  //     (	104	63	62	103	)
  //     (	105	64	63	104	)
  //     (	106	65	64	105	)
  //     (	99	58	65	106	)
  //   );
  // }

);



mergePatchPairs
(
);

// ************************************************************************* //
